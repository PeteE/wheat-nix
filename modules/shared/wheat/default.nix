{
  config,
  pkgs,
  lib,
  ...
}:
with lib; let
  cfg = config.wheat;
  home-directory =
    if pkgs.stdenv.hostPlatform.isDarwin then
      "/Users/${cfg.user.name}"
    else
      "/home/${cfg.user.name}";
in {
  options = {
    wheat = with types; {

      enable = mkEnableOption "Enable";

      secrets.enable = mkEnableOption "Enable SOPS secrets";

      user = with types; {
        enable = mkEnableOption "Enable";
        name = mkOption {
          default = "petee";
          description = "Username to create";
          type = str;
        };
        hashedPassword = mkOption {
          description = "hashed password generated by mkpasswd";
          type = str;
        };
        extraGroups = mkOption {
          default = [];
          description = "Additional groups to add the user to.";
          type = listOf str;
        };
        authorizedKeys = mkOption {
          type = listOf str;
          default = [
            "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJ3x/dtivaU+bPMRYzY1O+XQPEGnBahNnh9sBZMrJrIX petee"  # x1
            "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBaGYqqLKVikzCKsRJqfPu4zsTCKCfCz9xnWYQJNep+v petee@x1"  # prob dead
            "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAMShYQQ6RsCgYUXKxaVYjjGcjvdB533v/wsdrYq7G/7 JuiceSSH"  # phone
            "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMjd2zJEmRiuqMJz2kC4ABIiSVE2HWdRPkZTmcAxp6GS petee@nixos" # nixbox
            "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIL1SMCMFF12YYwlYGIi/UATCPTQ+PEdYOygGFouYrd5N petee@m3p" # lappy
            "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIC1Xr2ircu0B1j+fmj8r1P5xtRi+LstqeXCJ7XIdhpyI nixos@nixos"
          ];
        };
      };

    };
  };

  config = mkIf cfg.enable {
    #  Common settings for all my nixos machines
    # services.openssh.enable = true;

    programs.zsh.enable = true;
    users.groups.${cfg.user.name} = {};
    users.users.${cfg.user.name} = {
      isNormalUser = true;
      inherit (cfg.user) extraGroups name hashedPassword;
      home = home-directory;
      shell = pkgs.zsh;
      uid = 1000;
      openssh.authorizedKeys.keys = cfg.authorizedKeys;
    };

    environment.systemPackages = with pkgs; [
      dig
      nushell
      btop
      openbao
      azure-storage-azcopy
      direnv
      curl
      wget
      git
      git-credential-manager
      usql
      kubectx
      kubectl
      kubernetes-helm
      tcpdump
      oras
      nodejs_22
      uv
      just
      postgresql_15
      cargo
      fd
      skopeo
      openssl
      github-cli
      bc
      podman
      attic-client
      yazi
      stylua
      yq-go
      glow
      aria2
      nix-output-monitor
      links2
      presenterm
      asciinema
      attic-server
      clusterctl
      mpv
      clapper
      nitrogen
      pinentry-rofi
      niv
      lua5_3
      firefox
      docker
      yadm
      ipcalc
      wireshark
      vim
      tree
      jq
    ];

    fonts.packages = with pkgs; [
      nerd-fonts.fira-code
      nerd-fonts.droid-sans-mono
    ];

    # TODO refactor later
    services.tailscale.enable = true;
  };
}
